"use strict";export default class{constructor(t){this.state=t.state,this.observer={},this.define(t.elements)}get(t){return t.split(".").reduce((t,e)=>t?t[e]:"",this.state)}set(t,e,s=null,i=this.state){if(s||(s=t.split(".")),s.length>1)this.set(t,e,s.slice(1),i[s[0]]);else{const r=i[s[0]];i[s[0]]=e,this.runObserver(t,e,r)}}observe(t,e,s={}){this.observer[t]||(this.observer[t]=[]),this.observer[t].push(e),s.immediate&&e(this.get(t))}runObserver(t,e,s){this.observer[t]&&this.observer[t].forEach(t=>t(e,s))}define(t){const e=this;t.forEach(t=>{customElements.define(`reflex-${t}`,class extends document.createElement(t).constructor{constructor(){super(),this.reflex=e}connectedCallback(){if(this.bindAttributes=Array.from(this.attributes).filter(({name:t})=>t.startsWith(":")||"for"===t||"text"===t||"html"===t),this.hasAttribute("for")){const[t,e]=this.getAttribute("for").split(" in ");this.removeAttribute("for"),this.setAttribute("_for",`${t} in ${e}`),this.orginalNode=this.cloneNode(!0),this.setAttribute("for",`${t} in ${e}`),this.removeAttribute("_for")}this._setPaths(),this.render()}render(){this.bindAttributes.forEach(({name:t})=>{const e=this.path[t.replace(":","")],s=this.reflex.get(e,this);if("for"===t||"_for"===t){for(this._renderChilds(this);this.nextSibling._index>0;)this.nextSibling.remove();if(s.length>0&&this.orginalNode){this.hidden=!1;for(let t=s.length-1;t>0;t--){const e=this.orginalNode.cloneNode(!0);e._index=t,this.after(e),this._renderChilds(e)}}else this.hidden=!0}else"text"===t&&this.textContent!==s?this.textContent=s:"html"===t&&this.innerHTML!==s?this.innerHTML=s:t.startsWith(":")&&this.setAttribute(t.slice(1),s);":value"===t&&this.value!==s&&(this.value=s)})}_renderChilds(t){t.querySelectorAll("[is^='reflex-'").forEach(t=>t.render&&t.render())}_setPaths(){this.path={},this.bindAttributes.forEach(({name:t,value:e})=>{let s="for"===t||"_for"===t?e.split(" in ")[1]:e;const i=(t,e=[])=>{const s=t.parentNode&&t.parentNode.closest("[for], [_for]");return s?(e.push(s),i(s,e)):e},r=i(this);(this.hasAttribute("for")||this.hasAttribute("_for"))&&r.unshift(this),r.forEach(t=>{const e=t._index||0,[i,r]=t.hasAttribute("for")?t.getAttribute("for").split(" in "):t.getAttribute("_for").split(" in ");s=s.replace(new RegExp(`(^|\\.)${i}(\\.)`),`$1${r}.${e}$2`)}),this.path[t.replace(":","")]=s,this.reflex.observe(s,this.render.bind(this))})}},{extends:t})})}}